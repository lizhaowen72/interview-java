建造者模式的原理和实现比较简单,重点是掌握应用场景,避免过度使用

实现方式
> > 把构造函数定义为private,定义public static class Builder
> > 内部类,通过Builder类的set方法设置属性,调用build()创建对象

如果一个类中有很多属性,为避免构造函数的参数列表过长,影响代码的可读性和易用性,我们可以通过构造函数配合set()方法来解决.
但是,如果存在下面情况中的任意一种,我们就要考虑使用建造者模式了.
> > 我们把类的必填属性放到构造函数中,强制创建对象的时候就设置.如果必填的属性有很多,把这些必填属性都放到构造函数中设置,
> > 那构造函数右会出现参数列表很长的问题.如果我们把必填属性通过set()方法设置,那校验这些必填属性是否已经填写的逻辑就无处
> > 安放了.
> >
> > 如果类的属性之间有一定的依赖关系或者约束条件,我们继续使用构造函数配合set()方法的设计思路,那这些依赖关系或者约束条件的
> > 校验逻辑就无处安放了
> >
> > 如果我们希望创建不可变对象,也就是说,对象在创建好之后,就不能再修改内部的属性值,要实现这个功能,我们就不能再类中暴露set()  
> > 方法.构造函数配合set()方法来设置属性值的方式就不实用了

工厂模式和建造者模式的区别?
> > 工厂模式是用来创建不同但是相关类型的对象(继承同一父类或者接口的一组子类),由给定的参数来决定创建哪种类型的对象.建造者模式是
> > 用来创建一种类型的复杂对象,可以通过设置不同的可选参数,定制化创建不同的对象.
