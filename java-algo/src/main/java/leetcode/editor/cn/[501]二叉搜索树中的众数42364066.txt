
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode(int x) { val = x; }
     * }
     */
    class Solution {
        private int currVal;
        private int currCount = 0;
        private int maxCount = 0;
        private int modeCount = 0;
        private int[] modes;

        public int[] findMode(TreeNode root) {
            inorder(root);
            modes = new int[modeCount];
            modeCount = 0;
            currCount = 0;
            inorder(root);
            return modes;
        }

        private void inorder(TreeNode root) {
            if (root == null) return;
            inorder(root.left);
            handleValue(root.val);
            inorder(root.right);
        }

        private void handleValue(int val) {
            if (val != currVal) {
                currVal = val;
                currCount = 0;
            }
            currCount++;
            if (currCount > maxCount) {
                maxCount = currCount;
                modeCount = 1;
            } else if (currCount == maxCount) {
                if (modes != null) {
                    modes[modeCount] = currVal;
                }
                modeCount++;
            }
        }


        Map<Integer, Integer> map;
        int max = 0;

        public int[] findMode2(TreeNode root) {
            if (root == null) {
                return new int[0];
            }
            map = new HashMap<>();
            inorder2(root);
            List<Integer> list = new LinkedList<>();
            for (Integer key : map.keySet()) {
                if (map.get(key) == max) {
                    list.add(key);
                }
            }
            int[] res = new int[list.size()];
            for (int i = 0; i < res.length; i++) {
                res[i] = list.get(i);
            }
            return res;
        }

        private void inorder2(TreeNode root) {
            if (root.left != null) {
                inorder2(root.left);
            }
            map.put(root.val, map.getOrDefault(root.val, 0) + 1);
            max = Math.max(max, map.get(root.val));
            if (root.right != null) {
                inorder2(root.right);
            }
        }
    }


//runtime:1 ms
//memory:38.3 MB
