
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode(int x) { val = x; }
     * }
     */
    public class Codec {

        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            if (root == null) return null;
            StringBuilder sb = new StringBuilder();
            helper(root, sb);
            return sb.substring(0, sb.length() - 1);
        }

        private void helper(TreeNode root, StringBuilder sb) {
            if (root == null) return;
            sb.append(root.val).append(",");
            helper(root.left, sb);
            helper(root.right, sb);
        }


        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            if (data == null || data.length() == 0) {
                return null;
            }
            String[] nodeValues = data.split(",");
            return builder(nodeValues, 0, nodeValues.length - 1);
        }

        private TreeNode builder(String[] nodeValues, int lo, int hi) {
            if (lo > hi) {
                return null;
            }
            TreeNode root = new TreeNode(Integer.valueOf(nodeValues[lo]));
            int index = hi + 1;
            for (int i = lo + 1; i <= hi; i++) {
                if (Integer.valueOf(nodeValues[i]) > root.val) {
                    index = i;
                    break;
                }
            }
            root.left = builder(nodeValues, lo + 1, index - 1);
            root.right = builder(nodeValues, index, hi);
            return root;
        }
    }

    // Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

//runtime:7 ms
//memory:38.9 MB
