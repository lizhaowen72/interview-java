/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
    /**
     * Use a hashMap count to count the subtree sum occurrence.
     * <p>
     * A sub function dfs(TreeNode node) will
     * travel through a tree, recursively calculate the sum of subtree,
     * increment the count, and finally return the sum of the sub tree.
     */
    class Solution {
        Map<Integer, Integer> map = new HashMap<>();
        int countMax;

        public int[] findFrequentTreeSum(TreeNode root) {
            dfs(root);
            List<Integer> res = new ArrayList<>();
            for (Integer key : map.keySet()) {
                if (map.get(key) == countMax) {
                    res.add(key);
                }
            }
            return res.stream().mapToInt(i -> i).toArray();
        }

        private int dfs(TreeNode root) {
            if (root == null) return 0;
            int key = dfs(root.left) + dfs(root.right) + root.val;
            map.put(key, map.getOrDefault(key, 0) + 1);
            countMax = Math.max(countMax, map.get(key));
            return key;
        }
    }


//runtime:11 ms
//memory:38.1 MB
