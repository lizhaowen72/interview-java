个人对于java内存模型总结起来就是:
1.为什么定义java内存模型?
    现代计算机体系大部分是采用的对称多处理器的体系架构.每个处理器均有独立的寄存器和缓存,多个处理器可同时执行同一进程的不同线程
    ,这里称为处理器的乱序执行.在java中,不同的线程可能访问同一个共享变量.如果任由编译器或者处理器对这些访问进行优化排序,很可能
    出现无法想象的问题,这里称为编译器的重排序.除了处理器的乱序执行 编译器的重排序,还有内存系统的重排序.
    因此java语言规范引入了java内存模型,通过定义多项规则对编译器和处理器进行限制,主要是针对可见性和有序性
2.三个基本原则:原子性 可见性 有序性
3.java内存模型涉及的几个关键词:锁 volatile字段 final修饰符与对象的安全发布
    锁操作是具备happens-before关系的,解锁操作happens-before之后对同一把锁的加锁操作.实际上,在解锁的时候,jvm需要强制刷新缓存,
使得当前线程锁修改的内存对其他线程可见.
    volatile字段可以看成一种不保证原子性的同步但是保证可见性的特性,其性能往往是优于锁操作的,但是频繁的访问volatile字段也会出现
因为不断强制刷新缓存而影响程序的性能问题.
    final修饰符的实例字段则是涉及到新建对象的发布问题.当一个对象包含final修饰的实例字段时,其他线程能够看到已经初始化的final实例
字段,这是安全的.
4.happens-before的7个原则:
    1).程序次序规则:在一个线程内,按照程序代码顺序,书写在前面的操作happens-before与书写在后面的操作.准确的说,应该是控制流顺序而
不是程序代码顺序,因为要考虑分支 循环等结构
    2).管程锁定规则:一个unlock操作happens-before于后面对同一把锁的lock操作.这里的后面是指时间上的先后顺序
    3).volatile变量规则:对一个volatile修饰的变量的写操作happens-before于后面对这个变量的读操作.这里的后面是指时间上的先后顺序
    4).线程启动规则:Thread对象的start方法happens-before于此线程的每一个动作
    5).线程终止规则:线程中的所有操作都happens-before于对线程的终止检测.我们可以通过Thread.join()方法结束 Thread.isAlive的返
回值等手段检测线程已经终止执行
    6).线程中断原则:对线程interrupt()方法的调用happens-before于被中断线程的代码检测到中断事件的发生,可以通过thread.interrupted()
方法检测到是否有中断发生
    7).对象终结原则:一个对象的初始化完成(构造函数执行结束)h-b于它的finalize()方法的开始.
5.h-b的1个特性:传递性
6.java内存模型底层是怎么实现的?
主要是通过内存屏障(memory barrier)禁止重排序的,及时编译器根据具体的底层体系架构,将这些内存屏障替换成具体的CPU指令
对于编译器而言,内存屏障将限制它所能做的重排序优化.对于处理器而言,内存屏障将会导致缓存的刷新操作.


