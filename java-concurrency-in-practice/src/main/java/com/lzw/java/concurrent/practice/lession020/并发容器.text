并发容器4大类:List Map Set Queue

CopyOnWriteArrayList ----> List ----|                             |--BlockingDeque <---  LinkedBlockingDeque
                                    |                             |
ConcurrentHashMap   -----> Map  ----|                             |                     ArrayBlockingQueue
ConCurrentSkipListMap----> Map  ----|----->  并发容器 <----Queue <- |--BlockingQueue <-- LinkedBlockingQueue
                                    |                             |                     SynchronousQueue
ConcurrentSkipListSet----> Set  ----|                             |                     LinkedTransferQueue
CopyOnWriteArraySet  ----> Set  ----|                             |                     PriorityBlockingQueue
                                                                  |                     DelayQueue
                                                                  |--ConcurrentLinkedQueue
                                                                  |--ConcurrentLinkedDeque

(一)List
CopyOnWrite 顾名思义就是写的时候会将共享变量新复制一份出来,这样做的好处是读操作完全无锁

CopyOnWriteArrayList的实现原理
其内部维护了一个数组,成员变量array就指向这个内部数组,所有的读操作都是基于array进行的.迭代器Iterator遍历的就是array数组
如果在遍历array的同时,还有一个写操作,例如增加元素,它是如何处理的呢?其会将array复制一份,然后再新复制处理的数组上执行增加元
素的操作,执行完之后再将array指向这个新的数组.读写是可以并行的,读操作一直都是基于原array执行,而写操作是基于新array进行

使用CopyOnWriteArrayList需要注意的坑主要有两个方面
    1.应用场景,CopyOnWriteArrayList仅仅适用于写操作非常少的场景,而且能够容忍读写的短暂不一致.写入的新元素并不能立刻被遍历到
    2.CopyOnWriteArrayList的迭代器是只读的,不支持增删改.因为迭代器遍历的仅仅是一个快照,而对快照进行增删改是没有意义的

(二)Map
