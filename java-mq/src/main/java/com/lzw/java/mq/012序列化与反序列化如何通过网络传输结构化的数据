要想使用网络框架的API来传输结构化的数据,必须得先实现结构化的数据与字节流之间的双向转换
序列化:结构化数据转换成字节流的过程,称之为序列化,反过来转换就是反序列化

如何选择序列化实现,我们需要权衡几个因素
1. 序列化后的数据最好是易于人类阅读的
2. 实现的复杂度是否足够低
3. 序列化与反序列化的速度越快越好
4. 序列化的信息密度越大越好,也就是说,同样的一个结构化数据,序列化后占用的存储空间越小越好

各种序列化的比较
> 1.像json xml这种序列化方法,可读性好,但是信息密度也最低  
> 2.像kryo
> hessian这些通用的二进制序列化实现,适用范围广,适用简单,性能比jsonxml要好一些,但不如专用的
> 定制的序列化实现  
> 3.实现高性能的序列化和反序列化

思考题:你可以想一下这个问题：在内存里存放的任何数据，它最基础的存储单元也是二进制比特，也就是说，我们应用程序操作的对象，它在内存中也是使用二进制存储的，既然都是二进制，为什么不能直接把内存中，对象对应的二进制数据直接通过网络发送出去，或者保存在文件中呢？为什么还需要序列化和反序列化呢？
> ans:内存里的东西不通用,不同系统,不同语言的组织可能都是不一样的,而且还存在很多引用,指针,并不是直接数据块
> 序列化,反序列化,其实就是约定一种标准,大家都按照这个标准去弄,就能跨平台,跨语言
